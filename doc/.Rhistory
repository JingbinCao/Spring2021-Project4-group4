knitr::opts_chunk$set(echo = TRUE, message = F, warning = F,
options(width = 60),
matrix(runif(100), ncol = 20))
#Test Branch created
if(!require("readr")){
install.packages("readr")
}
if(!require("tidyverse")){
install.packages("tidyverse")
}
if(!require("glmnet")){
install.packages("glmnet")
}
if(!require("pryr")){
install.packages("pryr")
}
library(readr)
library(tidyverse)
library(glmnet)
library(pryr)
lowDim_raw <- read_csv('../data/lowDim_dataset.csv')
highDim_raw <- read_csv('../data/highDim_dataset.csv')
lowDim <- lowDim_raw
highDim <- highDim_raw
# Prepare Data
Y_high <-highDim$Y
X_high <-highDim%>% select(-Y, -A) %>% as.matrix
A_high <-highDim$A
Y_low <- lowDim$Y
A_low <- lowDim$A
X_low <- lowDim%>% select(-Y, -A) %>% as.matrix
# High Dimentional Data
ps_high_estimate <- glm(data = highDim,
formula = A~ . -Y,
family=binomial())
ps_high_data <- data.frame(ps = predict(ps_high_estimate,type="response"),
treatment = ps_high_estimate$model$A)
# Low Dimentional Data
ps_low_estimate <- glm(data = lowDim,
formula = A~ . -Y,
family=binomial())
ps_low_data <- data.frame(ps = predict(ps_low_estimate,type="response"),
treatment = ps_low_estimate$model$A)
# Visualize Data
## Show PS means
(ps_means <- data.frame(high_treat_ps_mean = mean(ps_high_data[ps_high_data$treatment==1,]$ps),
high_control_ps_mean = mean(ps_high_data[ps_high_data$treatment==0,]$ps),
low_treat_ps_mean = mean(ps_low_data[ps_low_data$treatment==1,]$ps),
low_control_ps_mean = mean(ps_low_data[ps_low_data$treatment==0,]$ps)))
## Plot Counts
ps_high_data %>%
mutate(treatment = ifelse(treatment == 0, "Control Group", "Treatment Group")) %>%
ggplot(aes(x=ps))+
ggtitle("High Dimentional Data")+
xlab("Propensity Scores")+
ylab("Count")+
geom_histogram(color="white")+
facet_wrap(~treatment)
ps_low_data %>%
mutate(treatment = ifelse(treatment == 0, "Control Group", "Treatment Group")) %>%
ggplot(aes(x=ps))+
ggtitle("Low Dimential Data")+
xlab("Propensity Scores")+
ylab("Count")+
geom_histogram(color="white")+
facet_wrap(~treatment)
ps_low_data
set.seed(0)
#Define Data
ld <- lowDim %>% mutate(A = factor(A))
hd <- highDim %>% mutate(A = factor(A))
# Write Algorithm
Regression_Estimate <- function(df){
df_X <- df%>% select(-Y,-A)
start <- Sys.time()
m0 <- glm(Y ~ ., data = subset(df[df$A==0,], select = -A))
m1 <- glm(Y ~ ., data = subset(df[df$A==1,], select = -A))
Y_pred_0 <- predict(m0, newdata = df_X)
Y_pred_1 <- predict(m1, newdata = df_X)
df <- df %>% mutate(Y_pred1 = Y_pred_1, Y_pred0 = Y_pred_0)
n <- nrow(df)
ATE = 1/n * sum(df$Y_pred1 - df$Y_pred0)
end <- Sys.time()
runtime = end - start
return(list(ATE = ATE, runtime = runtime))
}
# Output Performance
matrix(c(Regression_Estimate(hd)$ATE,
Regression_Estimate(ld)$ATE,
Regression_Estimate(hd)$runtime,
Regression_Estimate(ld)$runtime),
nrow = 2,
byrow = TRUE,
dimnames = list(c("ATE","Running Time (secs)"), c("High Dimension","Low Dimension")))
#Test Branch created
if(!require("readr")){
install.packages("readr")
}
if(!require("tidyverse")){
install.packages("tidyverse")
}
if(!require("glmnet")){
install.packages("glmnet")
}
if(!require("pryr")){
install.packages("pryr")
}
library(readr)
library(tidyverse)
library(glmnet)
library(pryr)
lowDim_raw <- read_csv('../data/lowDim_dataset.csv')
highDim_raw <- read_csv('../data/highDim_dataset.csv')
lowDim <- lowDim_raw
highDim <- highDim_raw
# Prepare Data
Y_high <-highDim$Y
X_high <-highDim%>% select(-Y, -A) %>% as.matrix
A_high <-highDim$A
Y_low <- lowDim$Y
A_low <- lowDim$A
X_low <- lowDim%>% select(-Y, -A) %>% as.matrix
# High Dimentional Data
ps_high_estimate <- glm(data = highDim,
formula = A~ . -Y,
family=binomial())
ps_high_data <- data.frame(ps = predict(ps_high_estimate,type="response"),
treatment = ps_high_estimate$model$A)
# Low Dimentional Data
ps_low_estimate <- glm(data = lowDim,
formula = A~ . -Y,
family=binomial())
ps_low_data <- data.frame(ps = predict(ps_low_estimate,type="response"),
treatment = ps_low_estimate$model$A)
# Visualize Data
## Show PS means
(ps_means <- data.frame(high_treat_ps_mean = mean(ps_high_data[ps_high_data$treatment==1,]$ps),
high_control_ps_mean = mean(ps_high_data[ps_high_data$treatment==0,]$ps),
low_treat_ps_mean = mean(ps_low_data[ps_low_data$treatment==1,]$ps),
low_control_ps_mean = mean(ps_low_data[ps_low_data$treatment==0,]$ps)))
## Plot Counts
ps_high_data %>%
mutate(treatment = ifelse(treatment == 0, "Control Group", "Treatment Group")) %>%
ggplot(aes(x=ps))+
ggtitle("High Dimentional Data")+
xlab("Propensity Scores")+
ylab("Count")+
geom_histogram(color="white")+
facet_wrap(~treatment)
ps_low_data %>%
mutate(treatment = ifelse(treatment == 0, "Control Group", "Treatment Group")) %>%
ggplot(aes(x=ps))+
ggtitle("Low Dimential Data")+
xlab("Propensity Scores")+
ylab("Count")+
geom_histogram(color="white")+
facet_wrap(~treatment)
ps[ps$treatment==0]
ps_low_data
ps_low_data[ps_low_data$treatment==0]
ps_low_data[ps_low_data$treatment==0,]
ifelse(ps_low_data$treatment==1,1/(1-ps_low_data$ps),1/ps_low_data$ps)
weights <- ps$treatment/ps$ps+(1-ps$treatment)/(1-ps$ps)
weights <- ps_low_data$treatment/ps_low_data$ps+(1-ps_low_data$treatment)/(1-ps_low_data$ps)
lowDim
highDim$Y[df$A==1]
highDim$Y[highDim$A==1]
set.seed(0)
# Define Data
ld <- lowDim %>% mutate(A = factor(A))
hd <- highDim %>% mutate(A = factor(A))
# Write Algorithm
IPW <- function(df,ps){
start <- Sys.time()
ps['weights'] <- ps$treatment/ps$ps+(1-ps$treatment)/(1-ps$ps)
ATE <- (sum(ps$weights[ps$treatment==1]*df$Y[df$A==1])-sum(ps$weights[ps$treatment==0]*df$Y[df$A==0]))/nrow(df)
end <- Sys.time()
runtime = end - start
return(list(ATE,runtime))
}
# Output Performance
matrix(c(),
nrow = 2,byrow = TRUE,
dimnames = list(c("ATE","Running Time (secs)"), c("High Dimension","Low Dimension")))
set.seed(0)
# Define Data
ld <- lowDim %>% mutate(A = factor(A))
hd <- highDim %>% mutate(A = factor(A))
# Write Algorithm
IPW <- function(df,ps){
start <- Sys.time()
ps['weights'] <- ps$treatment/ps$ps+(1-ps$treatment)/(1-ps$ps)
ATE <- (sum(ps$weights[ps$treatment==1]*df$Y[df$A==1])-sum(ps$weights[ps$treatment==0]*df$Y[df$A==0]))/nrow(df)
end <- Sys.time()
runtime = end - start
return(list(ATE,runtime))
}
IPW(ld,ps_low_data)
# Output Performance
matrix(c(),
nrow = 2,byrow = TRUE,
dimnames = list(c("ATE","Running Time (secs)"), c("High Dimension","Low Dimension")))
set.seed(0)
#Define Data
ld <- lowDim %>% mutate(A = factor(A))
hd <- highDim %>% mutate(A = factor(A))
# Write Algorithm
Regression_Estimate <- function(df){
df_X <- df%>% select(-Y,-A)
start <- Sys.time()
m0 <- glm(Y ~ ., data = subset(df[df$A==0,], select = -A))
m1 <- glm(Y ~ ., data = subset(df[df$A==1,], select = -A))
Y_pred_0 <- predict(m0, newdata = df_X)
Y_pred_1 <- predict(m1, newdata = df_X)
df <- df %>% mutate(Y_pred1 = Y_pred_1, Y_pred0 = Y_pred_0)
n <- nrow(df)
ATE = 1/n * sum(df$Y_pred1 - df$Y_pred0)
end <- Sys.time()
runtime = end - start
return(list(ATE = ATE, runtime = runtime))
}
# Output Performance
matrix(c(Regression_Estimate(hd)$ATE,
Regression_Estimate(ld)$ATE,
Regression_Estimate(hd)$runtime,
Regression_Estimate(ld)$runtime),
nrow = 2,
byrow = TRUE,
dimnames = list(c("ATE","Running Time (secs)"), c("High Dimension","Low Dimension")))
set.seed(0)
# Define Data
ld <- lowDim %>% mutate(A = factor(A))
hd <- highDim %>% mutate(A = factor(A))
# Write Algorithm
IPW <- function(df,ps){
start <- Sys.time()
ps['weights'] <- ps$treatment/ps$ps+(1-ps$treatment)/(1-ps$ps)
ATE <- (sum(ps$weights[ps$treatment==1]*df$Y[df$A==1])-sum(ps$weights[ps$treatment==0]*df$Y[df$A==0]))/nrow(df)
end <- Sys.time()
runtime = end - start
return(list(ATE,runtime))
}
IPW(ld,ps_low_data)
# Output Performance
matrix(c(IPW(ld,ps_low_data)$ATE,
IPW(hd,ps_high_data)$ATE,
IPW(ld,ps_low_data)$runtime,
IPW(hd,ps_high_data)$runtime),
nrow = 2,byrow = TRUE,
dimnames = list(c("ATE","Running Time (secs)"), c("High Dimension","Low Dimension")))
set.seed(0)
# Define Data
ld <- lowDim %>% mutate(A = factor(A))
hd <- highDim %>% mutate(A = factor(A))
# Write Algorithm
IPW <- function(df,ps){
start <- Sys.time()
ps['weights'] <- ps$treatment/ps$ps+(1-ps$treatment)/(1-ps$ps)
ATE <- (sum(ps$weights[ps$treatment==1]*df$Y[df$A==1])-sum(ps$weights[ps$treatment==0]*df$Y[df$A==0]))/nrow(df)
end <- Sys.time()
runtime = end - start
return(list(ATE=ATE,runtime=runtime))
}
IPW(ld,ps_low_data)
# Output Performance
matrix(c(IPW(ld,ps_low_data)$ATE,
IPW(hd,ps_high_data)$ATE,
IPW(ld,ps_low_data)$runtime,
IPW(hd,ps_high_data)$runtime),
nrow = 2,byrow = TRUE,
dimnames = list(c("ATE","Running Time (secs)"), c("High Dimension","Low Dimension")))
set.seed(0)
# Define Data
ld <- lowDim %>% mutate(A = factor(A))
hd <- highDim %>% mutate(A = factor(A))
# Write Algorithm
IPW <- function(df,ps){
start <- Sys.time()
ps['weights'] <- ps$treatment/ps$ps+(1-ps$treatment)/(1-ps$ps)
ATE <- (sum(ps$weights[ps$treatment==1]*df$Y[df$A==1])-sum(ps$weights[ps$treatment==0]*df$Y[df$A==0]))/nrow(df)
end <- Sys.time()
runtime = end - start
return(list(ATE=ATE,runtime=runtime))
}
IPW(ld,ps_low_data)
# Output Performance
matrix(c(IPW(hd,ps_high_data)$ATE,
IPW(ld,ps_low_data)$ATE,
IPW(hd,ps_high_data)$runtime,
IPW(ld,ps_low_data)$runtime),
nrow = 2,byrow = TRUE,
dimnames = list(c("ATE","Running Time (secs)"), c("High Dimension","Low Dimension")))
set.seed(0)
# Define Data
ld <- lowDim %>% mutate(A = factor(A))
hd <- highDim %>% mutate(A = factor(A))
# Write Algorithm
IPW <- function(df,ps){
start <- Sys.time()
ps['weights'] <- ps$treatment/ps$ps+(1-ps$treatment)/(1-ps$ps)
treatment <- sum(ps$weights[ps$treatment==1]*df$Y[df$A==1])
controll <- sum(ps$weights[ps$treatment==0]*df$Y[df$A==0])
ATE <- (treatment-controll)/nrow(df)
#  ATE <- (sum(ps$weights[ps$treatment==1]*df$Y[df$A==1])-sum(ps$weights[ps$treatment==0]*df$Y[df$A==0]))/nrow(df)
end <- Sys.time()
runtime = end - start
return(list(ATE=ATE,runtime=runtime))
}
IPW(ld,ps_low_data)
# Output Performance
matrix(c(IPW(hd,ps_high_data)$ATE,
IPW(ld,ps_low_data)$ATE,
IPW(hd,ps_high_data)$runtime,
IPW(ld,ps_low_data)$runtime),
nrow = 2,byrow = TRUE,
dimnames = list(c("ATE","Running Time (secs)"), c("High Dimension","Low Dimension")))
