"Stratification + LR",
"Regression Adjustment + LR"),
ATE = c(-54.8558,
IPW(highDim,ps_high_data)$ATE,
Regression_Estimate(highDim)$ATE,
Strat(highDim,ps_high_data)$ATE,
Reg_adj(highDim,ps_high_data)$ATE),
Run_Time = c("N.A",
IPW(highDim,ps_high_data)$runtime[[1]],
Regression_Estimate(highDim)$runtime[[1]],
Strat(highDim,ps_high_data)$runtime[[1]],
Reg_adj(highDim,ps_high_data)$runtime[[1]]),
Performance = c("N.A.",
sqrt(abs(-54.8558-IPW(highDim,ps_high_data)$ATE)),
sqrt(abs(-54.8558-Regression_Estimate(highDim)$ATE)),
sqrt(abs(-54.8558-Strat(highDim,ps_high_data)$ATE)),
sqrt(abs(-54.8558-Reg_adj(highDim,ps_high_data)$ATE)))
)
low_dim_result <- data.frame(
Model = c("True ATE",
"IPW + LR",
"Regression Estimate",
"Stratification + LR",
"Regression Adjustment + LR"),
ATE = c(2.0901,
IPW(lowDim,ps_low_data)$ATE,
Regression_Estimate(lowDim)$ATE,
Strat(lowDim,ps_low_data)$ATE,
Reg_adj(lowDim,ps_low_data)$ATE),
Run_Time = c("N.A",
IPW(lowDim,ps_low_data)$runtime[[1]],
Regression_Estimate(lowDim)$runtime[[1]],
Strat(lowDim,ps_low_data)$runtime[[1]],
Reg_adj(lowDim,ps_low_data)$runtime[[1]]),
Performance = c("N.A.",
sqrt(abs(2.0901-IPW(lowDim,ps_low_data)$ATE)),
sqrt(abs(2.0901-Regression_Estimate(lowDim)$ATE)),
sqrt(abs(2.0901-Strat(lowDim,ps_low_data)$ATE)),
sqrt(abs(2.0901-Reg_adj(lowDim,ps_low_data)$ATE)))
)
knitr::kable(low_dim_result)
knitr::kable(high_dim_result)
high_results_plot <- high_dim_result %>%
mutate(Dimension = 'high') %>%
mutate(Model = c("True ATE",
"IPW \n + LR",
"Regression \n Estimate",
"Stratification \n + LR",
"Regression \n Adjustment \n + LR"))
low_results_plot <- low_dim_result %>%
mutate(Dimension = 'low') %>%
mutate(Model = c("True ATE",
"IPW \n + LR",
"Regression \n Estimate",
"Stratification \n + LR",
"Regression \n Adjustment \n + LR"))
Summary_df <- rbind(low_results_plot, high_results_plot)
#plots
jpeg(file="../figs/ATE.jpeg", width = 500, height = 400)
ggplot(Summary_df, aes(Model, ATE, group=Dimension, col = Dimension)) +
geom_point() +
geom_line()+
labs(title='ATE of Different Models',
x='',
y='',
col='Dimension') +
geom_text(aes(label=as.character(round(ATE, 3))), nudge_y = 0.2)
dev.off()
jpeg(file="../figs/performance.jpeg", width = 500, height = 400)
ggplot(Summary_df, aes(Model, Performance, group=Dimension, col = Dimension)) +
geom_point() +
geom_line()+
labs(title='Performance of Different Models',
x='',
y='Sqrt. Error',
col='Dimension')
dev.off()
jpeg(file="../figs/runtime.jpeg", width = 500, height = 400)
ggplot(Summary_df, aes(Model, Run_Time, group=Dimension, col = Dimension)) +
geom_point() +
geom_line()+
labs(title='Run Time of Different Models',
x='',
y='Run Time (in seconds)',
col='Dimension')
dev.off()
knitr::include_graphics("../figs/ATE.jpeg")
knitr::include_graphics("../figs/performance.jpeg")
knitr::include_graphics("../figs/runtime.jpeg")
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F,
options(width = 60),
matrix(runif(100), ncol = 20))
#Test Branch created
if(!require("readr")){
install.packages("readr")
}
if(!require("tidyverse")){
install.packages("tidyverse")
}
if(!require("glmnet")){
install.packages("glmnet")
}
if(!require("pryr")){
install.packages("pryr")
}
library(readr)
library(tidyverse)
library(glmnet)
library(pryr)
lowDim_raw <- read_csv('../data/lowDim_dataset.csv')
highDim_raw <- read_csv('../data/highDim_dataset.csv')
lowDim <- lowDim_raw
highDim <- highDim_raw
# High Dimentional Data
ps_high_estimate <- glm(data = highDim,
formula = A~ . -Y,
family=binomial())
ps_high_data <- data.frame(ps = predict(ps_high_estimate,type="response"),
treatment = ps_high_estimate$model$A)
# Low Dimentional Data
ps_low_estimate <- glm(data = lowDim,
formula = A~ . -Y,
family=binomial())
ps_low_data <- data.frame(ps = predict(ps_low_estimate,type="response"),
treatment = ps_low_estimate$model$A)
# Visualize Data
## Show PS means
(ps_means <- data.frame(high_treat_ps_mean = mean(ps_high_data[ps_high_data$treatment==1,]$ps),
high_control_ps_mean = mean(ps_high_data[ps_high_data$treatment==0,]$ps),
low_treat_ps_mean = mean(ps_low_data[ps_low_data$treatment==1,]$ps),
low_control_ps_mean = mean(ps_low_data[ps_low_data$treatment==0,]$ps)))
## Plot Counts
ps_high_data %>%
mutate(treatment = ifelse(treatment == 0, "Control Group", "Treatment Group")) %>%
ggplot(aes(x=ps))+
ggtitle("High Dimentional Data")+
xlab("Propensity Scores")+
ylab("Count")+
geom_histogram(color="white")+
facet_wrap(~treatment)
ps_low_data %>%
mutate(treatment = ifelse(treatment == 0, "Control Group", "Treatment Group")) %>%
ggplot(aes(x=ps))+
ggtitle("Low Dimential Data")+
xlab("Propensity Scores")+
ylab("Count")+
geom_histogram(color="white")+
facet_wrap(~treatment)
set.seed(0)
# Define Data
# Write Algorithm
IPW <- function(df,ps){
start <- Sys.time()
ps['weights'] <- df$A/ps$ps+(1-df$A)/(1-ps$ps)
treatment <- sum(ps[ps$treatment==1,]$weights*df$Y[df$A==1])
controll <- sum(ps[ps$treatment==0,]$weights*df$Y[df$A==0])
ATE <- (treatment-controll)/nrow(df)
end <- Sys.time()
runtime = end - start
return(list(ATE=ATE,runtime=runtime))
}
# Output Performance
matrix(c(IPW(highDim,ps_high_data)$ATE,
IPW(lowDim,ps_low_data)$ATE,
IPW(highDim,ps_high_data)$runtime,
IPW(lowDim,ps_low_data)$runtime),
nrow = 2,byrow = TRUE,
dimnames = list(c("ATE","Running Time (secs)"), c("High Dimension","Low Dimension")))
set.seed(0)
# Write Algorithm
Regression_Estimate <- function(df){
start <- Sys.time()
model_0 <- glm(Y ~ ., data = subset(df[df$A==0,], select = -A))
model_1 <- glm(Y ~ ., data = subset(df[df$A==1,], select = -A))
ATE = 1/nrow(df) * sum(predict(model_1, newdata = df%>% select(-Y,-A)) -
predict(model_0, newdata = df%>% select(-Y,-A)))
end <- Sys.time()
runtime = end - start
return(list(ATE = ATE, runtime = runtime))
}
# Output Performance
matrix(c(Regression_Estimate(highDim)$ATE,
Regression_Estimate(lowDim)$ATE,
Regression_Estimate(highDim)$runtime,
Regression_Estimate(lowDim)$runtime),
nrow = 2,
byrow = TRUE,
dimnames = list(c("ATE","Running Time (secs)"), c("High Dimension","Low Dimension")))
set.seed(0)
# Define Data
# Write Algorithm
Strat <- function(df, ps, k=8){
start = Sys.time()
ATE <- 0
prev <- 0
cancatdata <- cbind(df, ps)
#k <- 10
for (i in 1:k) {
ps_str = as.numeric(ps$ps)
str_q <- quantile(ps_str, (1/k)*i)
str_data <- cancatdata[cancatdata$ps>=prev,]
str_data <- str_data[str_q>=str_data$ps,]
prev = str_q
temp_t <- sum(str_data$Y[str_data$A==1])
temp_t <- 1/nrow(str_data[str_data$A==1,])*temp_t
temp_c <- sum(str_data$Y[str_data$A==0])
temp_c <- 1/nrow(str_data[str_data$A==0,])*temp_c
str_e <- temp_t - temp_c
ATE <- ATE + str_e*nrow(str_data)/nrow(df)
}
end = Sys.time()
runtime = end - start
return(list(ATE = ATE, runtime = runtime))
}
# Output Performance
matrix(c(Strat(highDim,ps_high_data)$ATE,
Strat(lowDim,ps_low_data)$ATE,
Strat(highDim,ps_high_data)$runtime,
Strat(lowDim,ps_low_data)$runtime),
nrow = 2,
byrow = TRUE,
dimnames = list(c("ATE","Running Time (secs)"), c("High Dimension","Low Dimension")))
set.seed(0)
# Define Data
# Write Algorithm
Reg_adj <- function(df,ps_data){
df<- data.frame(cbind(Y=df$Y,A=df$A,ps=ps_data$ps))
start <- Sys.time()
m<- lm(Y ~ A+ ps, data = df)
ATE = m$coefficients[2]
end <- Sys.time()
runtime = end - start
return(list(ATE = ATE, runtime = runtime))
}
# Output Performance
matrix(c(Reg_adj(highDim,ps_high_data)$ATE,
Reg_adj(lowDim,ps_low_data)$ATE,
Reg_adj(highDim,ps_high_data)$runtime,
Reg_adj(lowDim,ps_high_data)$runtime),
nrow = 2,
byrow = TRUE,
dimnames = list(c("ATE","Running Time (secs)"), c("High Dimension","Low Dimension")))
set.seed(0)
high_dim_result <- data.frame(
Model = c("True ATE",
"IPW + LR",
"Regression Estimate",
"Stratification + LR",
"Regression Adjustment + LR"),
ATE = c(-54.8558,
round(IPW(highDim,ps_high_data)$ATE,4),
round(Regression_Estimate(highDim)$ATE,4),
round(Strat(highDim,ps_high_data)$ATE,4),
round(Reg_adj(highDim,ps_high_data)$ATE,4)),
Run_Time = c("N.A",
round(IPW(highDim,ps_high_data)$runtime[[1]],8),
round(Regression_Estimate(highDim)$runtime[[1]],8),
round(Strat(highDim,ps_high_data)$runtime[[1]],8),
round(Reg_adj(highDim,ps_high_data)$runtime[[1]],8)),
Squared_Error = c("N.A.",
round(sqrt(abs(-54.8558-IPW(highDim,ps_high_data)$ATE)),4),
round(sqrt(abs(-54.8558-Regression_Estimate(highDim)$ATE)),4),
round(sqrt(abs(-54.8558-Strat(highDim,ps_high_data)$ATE)),4),
round(sqrt(abs(-54.8558-Reg_adj(highDim,ps_high_data)$ATE)),4))
)
low_dim_result <- data.frame(
Model = c("True ATE",
"IPW + LR",
"Regression Estimate",
"Stratification + LR",
"Regression Adjustment + LR"),
ATE = c(2.0901,
round(IPW(lowDim,ps_low_data)$ATE,4),
round(Regression_Estimate(lowDim)$ATE,4),
round(Strat(lowDim,ps_low_data)$ATE,4),
round(Reg_adj(lowDim,ps_low_data)$ATE,4)),
Run_Time = c("N.A",
round(IPW(lowDim,ps_low_data)$runtime[[1]],8),
round(Regression_Estimate(lowDim)$runtime[[1]],8),
round(Strat(lowDim,ps_low_data)$runtime[[1]],8),
round(Reg_adj(lowDim,ps_low_data)$runtime[[1]],8)),
Squared_Error = c("N.A.",
round(sqrt(abs(2.0901-IPW(lowDim,ps_low_data)$ATE)),4),
round(sqrt(abs(2.0901-Regression_Estimate(lowDim)$ATE)),4),
round(sqrt(abs(2.0901-Strat(lowDim,ps_low_data)$ATE)),4),
round(sqrt(abs(2.0901-Reg_adj(lowDim,ps_low_data)$ATE)),4))
)
knitr::kable(low_dim_result)
knitr::kable(high_dim_result)
high_results_plot <- high_dim_result %>%
mutate(Dimension = 'high') %>%
mutate(Model = c("True ATE",
"IPW \n + LR",
"Regression \n Estimate",
"Stratification \n + LR",
"Regression \n Adjustment \n + LR"))
low_results_plot <- low_dim_result %>%
mutate(Dimension = 'low') %>%
mutate(Model = c("True ATE",
"IPW \n + LR",
"Regression \n Estimate",
"Stratification \n + LR",
"Regression \n Adjustment \n + LR"))
Summary_df <- rbind(low_results_plot, high_results_plot)
#plots
jpeg(filename="../figs/ATE.jpeg", width = 500, height = 400,quality = 1300)
ggplot(Summary_df, aes(Model, ATE, group=Dimension, col = Dimension)) +
geom_point() +
geom_line()+
labs(title='ATE of Different Models',
x='',
y='',
col='Dimension') +
geom_text(aes(label=as.character(ATE)), nudge_y = 2)
while (!is.null(dev.list()))  dev.off()
jpeg(filename="../figs/performance.jpeg", width = 500, height = 400,quality = 1300)
ggplot(Summary_df[c(2,3,4,5,7,8,9,10),], aes(Model, Squared_Error, group=Dimension, col = Dimension)) +
geom_point() +
geom_line()+
labs(title='Performance (Squared Error) of Different Models',
x='',
y='Sqrt. Error',
col='Dimension') +
geom_text(aes(label=as.character(Squared_Error)), nudge_y = .2)
while (!is.null(dev.list()))  dev.off()
jpeg(filename="../figs/runtime.jpeg", width = 500, height = 400,quality = 1300)
ggplot(Summary_df[c(2,3,4,5,7,8,9,10),], aes(Model, Run_Time, group=Dimension, col = Dimension)) +
geom_point() +
geom_line()+
labs(title='Run Time of Different Models',
x='',
y='Run Time (in seconds)',
col='Dimension') +
geom_text(aes(label=as.character(Run_Time), nudge_y = .6))
while (!is.null(dev.list()))  dev.off()
knitr::include_graphics("../figs/ATE.jpeg")
knitr::include_graphics("../figs/performance.jpeg")
knitr::include_graphics("../figs/runtime.jpeg")
set.seed(0)
# Define Data
# Write Algorithm
Strat <- function(df, ps, k=8){
start = Sys.time()
ATE <- 0
prev <- 0
cancatdata <- cbind(df, ps)
for (i in 1:k) {
ps_str = as.numeric(ps$ps)
str_q <- quantile(ps_str, (1/k)*i)
str_data <- cancatdata[cancatdata$ps>=prev,]
str_data <- str_data[str_q>=str_data$ps,]
prev = str_q
temp_t <- sum(str_data$Y[str_data$A==1])
temp_t <- 1/nrow(str_data[str_data$A==1,])*temp_t
temp_c <- sum(str_data$Y[str_data$A==0])
temp_c <- 1/nrow(str_data[str_data$A==0,])*temp_c
str_e <- temp_t - temp_c
ATE <- ATE + str_e*nrow(str_data)/nrow(df)
}
end = Sys.time()
runtime = end - start
return(list(ATE = ATE, runtime = runtime))
}
# Output Performance
stra_result_high <- matrix(0, nrow = 10, ncol = 2, dimnames = list(c("ATE","Running Time (secs)")))
set.seed(0)
# Define Data
# Write Algorithm
Strat <- function(df, ps, k=8){
start = Sys.time()
ATE <- 0
prev <- 0
cancatdata <- cbind(df, ps)
for (i in 1:k) {
ps_str = as.numeric(ps$ps)
str_q <- quantile(ps_str, (1/k)*i)
str_data <- cancatdata[cancatdata$ps>=prev,]
str_data <- str_data[str_q>=str_data$ps,]
prev = str_q
temp_t <- sum(str_data$Y[str_data$A==1])
temp_t <- 1/nrow(str_data[str_data$A==1,])*temp_t
temp_c <- sum(str_data$Y[str_data$A==0])
temp_c <- 1/nrow(str_data[str_data$A==0,])*temp_c
str_e <- temp_t - temp_c
ATE <- ATE + str_e*nrow(str_data)/nrow(df)
}
end = Sys.time()
runtime = end - start
return(list(ATE = ATE, runtime = runtime))
}
# Output Performance
stra_result_high <- matrix(0, nrow = 10, ncol = 2, dimnames = list(,c("ATE","Running Time (secs)")))
set.seed(0)
# Define Data
# Write Algorithm
Strat <- function(df, ps, k=8){
start = Sys.time()
ATE <- 0
prev <- 0
cancatdata <- cbind(df, ps)
for (i in 1:k) {
ps_str = as.numeric(ps$ps)
str_q <- quantile(ps_str, (1/k)*i)
str_data <- cancatdata[cancatdata$ps>=prev,]
str_data <- str_data[str_q>=str_data$ps,]
prev = str_q
temp_t <- sum(str_data$Y[str_data$A==1])
temp_t <- 1/nrow(str_data[str_data$A==1,])*temp_t
temp_c <- sum(str_data$Y[str_data$A==0])
temp_c <- 1/nrow(str_data[str_data$A==0,])*temp_c
str_e <- temp_t - temp_c
ATE <- ATE + str_e*nrow(str_data)/nrow(df)
}
end = Sys.time()
runtime = end - start
return(list(ATE = ATE, runtime = runtime))
}
# Output Performance
stra_result_high <- matrix(0, nrow = 10, ncol = 2, dimnames = list(c("1",  "2", "3", "4", "5", "6", "7", "8", "9", "10"), c("ATE","Running Time (secs)")))
stra_result_low <- matrix(0, nrow = 10, ncol = 2, dimnames = list(c("1",  "2", "3", "4", "5", "6", "7", "8", "9", "10"), c("ATE","Running Time (secs)")))
for (i in 1:10){
stra_result_high[i,] <- c(Strat(highDim,ps_high_data, i)$ATE, Strat(highDim,ps_high_data, i)$runtime)
stra_result_low[i,] <- c(Strat(lowDim,ps_low_data, i)$ATE, Strat(lowDim,ps_low_data, i)$runtime)
}
matrix(c(Strat(highDim,ps_high_data)$ATE,
Strat(lowDim,ps_low_data)$ATE,
Strat(highDim,ps_high_data)$runtime,
Strat(lowDim,ps_low_data)$runtime),
nrow = 2,
byrow = TRUE,
dimnames = list(c("ATE","Running Time (secs)"), c("High Dimension","Low Dimension")))
set.seed(0)
# Define Data
# Write Algorithm
Strat <- function(df, ps, k=8){
start = Sys.time()
ATE <- 0
prev <- 0
cancatdata <- cbind(df, ps)
for (i in 1:k) {
ps_str = as.numeric(ps$ps)
str_q <- quantile(ps_str, (1/k)*i)
str_data <- cancatdata[cancatdata$ps>=prev,]
str_data <- str_data[str_q>=str_data$ps,]
prev = str_q
temp_t <- sum(str_data$Y[str_data$A==1])
temp_t <- 1/nrow(str_data[str_data$A==1,])*temp_t
temp_c <- sum(str_data$Y[str_data$A==0])
temp_c <- 1/nrow(str_data[str_data$A==0,])*temp_c
str_e <- temp_t - temp_c
ATE <- ATE + str_e*nrow(str_data)/nrow(df)
}
end = Sys.time()
runtime = end - start
return(list(ATE = ATE, runtime = runtime))
}
# Output Performance
stra_result_high <- matrix(0, nrow = 10, ncol = 2, dimnames = list(c("1",  "2", "3", "4", "5", "6", "7", "8", "9", "10"), c("ATE","Running Time (secs)")))
stra_result_low <- matrix(0, nrow = 10, ncol = 2, dimnames = list(c("1",  "2", "3", "4", "5", "6", "7", "8", "9", "10"), c("ATE","Running Time (secs)")))
for (i in 1:10){
stra_result_high[i,] <- c(Strat(highDim,ps_high_data, i)$ATE, Strat(highDim,ps_high_data, i)$runtime)
stra_result_low[i,] <- c(Strat(lowDim,ps_low_data, i)$ATE, Strat(lowDim,ps_low_data, i)$runtime)
}
matrix(c(Strat(highDim,ps_high_data)$ATE,
Strat(lowDim,ps_low_data)$ATE,
Strat(highDim,ps_high_data)$runtime,
Strat(lowDim,ps_low_data)$runtime),
nrow = 2,
byrow = TRUE,
dimnames = list(c("ATE","Running Time (secs)"), c("High Dimension","Low Dimension")))
stra_result_low
set.seed(0)
# Define Data
# Write Algorithm
Strat <- function(df, ps, k=8){
start = Sys.time()
ATE <- 0
prev <- 0
cancatdata <- cbind(df, ps)
for (i in 1:k) {
ps_str = as.numeric(ps$ps)
str_q <- quantile(ps_str, (1/k)*i)
str_data <- cancatdata[cancatdata$ps>=prev,]
str_data <- str_data[str_q>=str_data$ps,]
prev = str_q
temp_t <- sum(str_data$Y[str_data$A==1])
temp_t <- 1/nrow(str_data[str_data$A==1,])*temp_t
temp_c <- sum(str_data$Y[str_data$A==0])
temp_c <- 1/nrow(str_data[str_data$A==0,])*temp_c
str_e <- temp_t - temp_c
ATE <- ATE + str_e*nrow(str_data)/nrow(df)
}
end = Sys.time()
runtime = end - start
return(list(ATE = ATE, runtime = runtime))
}
# Output Performance
stra_result_high <- matrix(0, nrow = 10, ncol = 2, dimnames = list(c("1",  "2", "3", "4", "5", "6", "7", "8", "9", "10"), c("ATE","Running Time (secs)")))
stra_result_low <- matrix(0, nrow = 10, ncol = 2, dimnames = list(c("1",  "2", "3", "4", "5", "6", "7", "8", "9", "10"), c("ATE","Running Time (secs)")))
for (i in 1:10){
stra_result_high[i,] <- c(Strat(highDim,ps_high_data, i)$ATE, Strat(highDim,ps_high_data, i)$runtime)
stra_result_low[i,] <- c(Strat(lowDim,ps_low_data, i)$ATE, Strat(lowDim,ps_low_data, i)$runtime)
}
stra_result_high
stra_result_low
matrix(c(Strat(highDim,ps_high_data)$ATE,
Strat(lowDim,ps_low_data)$ATE,
Strat(highDim,ps_high_data)$runtime,
Strat(lowDim,ps_low_data)$runtime),
nrow = 2,
byrow = TRUE,
dimnames = list(c("ATE","Running Time (secs)"), c("High Dimension","Low Dimension")))
